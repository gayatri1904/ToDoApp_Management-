import java.io.*;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.stream.Collectors;

public class ToDoApp {
    static class ToDoItem {
        private final UUID id;
        private String title;
        private String description;
        private boolean completed;
        private LocalDate dueDate; // new field

        public ToDoItem(String title, String description) {
            this.id = UUID.randomUUID();
            this.title = title;
            this.description = description;
            this.completed = false;
            this.dueDate = null;
        }

        public UUID getId() { return id; }
        public String getTitle() { return title; }
        public String getDescription() { return description; }
        public boolean isCompleted() { return completed; }
        public LocalDate getDueDate() { return dueDate; }

        public void setTitle(String title) { this.title = title; }
        public void setDescription(String description) { this.description = description; }
        public void toggleCompleted() { this.completed = !this.completed; }
        public void setDueDate(LocalDate date) { this.dueDate = date; }

        @Override
        public String toString() {
            String due = (dueDate == null) ? "No due" : dueDate.toString();
            return String.format("[%s] %s - %s (%s) Due: %s",
                    id.toString().substring(0, 8),
                    title,
                    description == null || description.isEmpty() ? "No desc" : description,
                    completed ? "DONE" : "PENDING",
                    due);
        }

        // CSV helpers
        public String toCSV() {
            return String.join(",",
                    id.toString(),
                    escape(title),
                    escape(description),
                    Boolean.toString(completed),
                    dueDate == null ? "" : dueDate.toString());
        }

        public static ToDoItem fromCSV(String line) {
            String[] parts = line.split(",", -1);
            if (parts.length < 5) return null;
            try {
                UUID id = UUID.fromString(parts[0]);
                String title = unescape(parts[1]);
                String desc = unescape(parts[2]);
                boolean done = Boolean.parseBoolean(parts[3]);
                LocalDate due = parts[4].isEmpty() ? null : LocalDate.parse(parts[4]);

                ToDoItem item = new ToDoItem(title, desc);
                // override autogenerated fields
                item.completed = done;
                item.dueDate = due;

                // hack: preserve original id (via reflection avoided)
                // safer: create constructor with id
                return new ToDoItemWithId(id, item);
            } catch (Exception e) {
                return null;
            }
        }

        // Escaping commas
        private static String escape(String s) {
            if (s == null) return "";
            return s.replace(",", ";");
        }
        private static String unescape(String s) {
            return s.replace(";", ",");
        }
    }

    // Helper subclass to preserve id when loading
    static class ToDoItemWithId extends ToDoItem {
        public ToDoItemWithId(UUID id, ToDoItem base) {
            super(base.getTitle(), base.getDescription());
            this.setTitle(base.getTitle());
            this.setDescription(base.getDescription());
            if (base.isCompleted()) this.toggleCompleted();
            if (base.getDueDate() != null) this.setDueDate(base.getDueDate());
            // overwrite the id via reflection-like hack
            try {
                java.lang.reflect.Field f = ToDoItem.class.getDeclaredField("id");
                f.setAccessible(true);
                f.set(this, id);
            } catch (Exception ignored) {}
        }
    }

    private final Map<UUID, ToDoItem> store = new HashMap<>();
    private final Scanner scanner = new Scanner(System.in);

    private void start() {
        System.out.println("---- To-Do CLI App (with Save/Load, Due Dates, Search) ----");
        printHelp();
        while (true) {
            System.out.print("\n> ");
            String line = scanner.nextLine().trim();
            if (line.isEmpty()) continue;
            String[] parts = line.split("\\s+", 2);
            String cmd = parts[0].toLowerCase();
            String arg = parts.length > 1 ? parts[1].trim() : "";

            switch (cmd) {
                case "add": cmdAdd(arg); break;
                case "list": cmdList(arg); break;
                case "edit": cmdEdit(arg); break;
                case "toggle": cmdToggle(arg); break;
                case "delete": cmdDelete(arg); break;
                case "due": cmdDue(arg); break;
                case "save": cmdSave(arg); break;
                case "load": cmdLoad(arg); break;
                case "help": printHelp(); break;
                case "exit": case "quit": return;
                default: System.out.println("Unknown command. Type 'help'.");
            }
        }
    }

    private void printHelp() {
        System.out.println("Commands:");
        System.out.println("  add <title> | <description>");
        System.out.println("  list [all|done|pending|search <keyword>|due]");
        System.out.println("  edit <id> <title> | <description>");
        System.out.println("  toggle <id>");
        System.out.println("  delete <id>");
        System.out.println("  due <id> <yyyy-mm-dd>");
        System.out.println("  save <filename.csv>");
        System.out.println("  load <filename.csv>");
        System.out.println("  exit");
    }

    private void cmdAdd(String arg) {
        if (arg.isEmpty()) { System.out.println("Usage: add <title> | <desc>"); return; }
        String[] parts = arg.split("\\|", 2);
        ToDoItem item = new ToDoItem(parts[0].trim(), parts.length > 1 ? parts[1].trim() : "");
        store.put(item.getId(), item);
        System.out.println("Added: " + item);
    }

    private void cmdList(String arg) {
        String[] parts = arg.split("\\s+", 2);
        String mode = parts[0].isEmpty() ? "all" : parts[0].toLowerCase();
        String keyword = parts.length > 1 ? parts[1].toLowerCase() : null;

        List<ToDoItem> list = new ArrayList<>(store.values());
        List<ToDoItem> filtered;

        switch (mode) {
            case "done": filtered = list.stream().filter(ToDoItem::isCompleted).collect(Collectors.toList()); break;
            case "pending": filtered = list.stream().filter(it -> !it.isCompleted()).collect(Collectors.toList()); break;
            case "search": 
                if (keyword == null) { System.out.println("Usage: list search <keyword>"); return; }
                filtered = list.stream()
                        .filter(it -> it.getTitle().toLowerCase().contains(keyword)
                                || it.getDescription().toLowerCase().contains(keyword))
                        .collect(Collectors.toList());
                break;
            case "due":
                filtered = list.stream()
                        .sorted(Comparator.comparing(it -> it.getDueDate() == null ? LocalDate.MAX : it.getDueDate()))
                        .collect(Collectors.toList());
                break;
            default: filtered = list;
        }

        if (filtered.isEmpty()) { System.out.println("(No items)"); return; }
        filtered.forEach(System.out::println);
    }

    private void cmdEdit(String arg) {
        String[] firstSplit = arg.split("\\s+", 2);
        if (firstSplit.length < 2) { System.out.println("Usage: edit <id> <title>|<desc>"); return; }
        UUID id = resolveId(firstSplit[0]);
        ToDoItem item = store.get(id);
        if (item == null) { System.out.println("Item not found."); return; }
        String[] parts = firstSplit[1].split("\\|", 2);
        item.setTitle(parts[0].trim());
        if (parts.length > 1) item.setDescription(parts[1].trim());
        System.out.println("Updated: " + item);
    }

    private void cmdToggle(String arg) {
        UUID id = resolveId(arg);
        ToDoItem item = store.get(id);
        if (item != null) {
            item.toggleCompleted();
            System.out.println("Toggled: " + item);
        }
    }

    private void cmdDelete(String arg) {
        UUID id = resolveId(arg);
        ToDoItem removed = store.remove(id);
        if (removed != null) System.out.println("Deleted: " + removed.getTitle());
    }

    private void cmdDue(String arg) {
        String[] parts = arg.split("\\s+");
        if (parts.length != 2) { System.out.println("Usage: due <id> <yyyy-mm-dd>"); return; }
        UUID id = resolveId(parts[0]);
        ToDoItem item = store.get(id);
        if (item == null) { System.out.println("Item not found."); return; }
        try {
            LocalDate date = LocalDate.parse(parts[1], DateTimeFormatter.ISO_DATE);
            item.setDueDate(date);
            System.out.println("Due date set: " + item);
        } catch (Exception e) {
            System.out.println("Invalid date format.");
        }
    }

    private void cmdSave(String filename) {
        if (filename.isEmpty()) { System.out.println("Usage: save <filename.csv>"); return; }
        try (PrintWriter pw = new PrintWriter(new FileWriter(filename))) {
            for (ToDoItem item : store.values()) {
                pw.println(item.toCSV());
            }
            System.out.println("Saved " + store.size() + " items to " + filename);
        } catch (IOException e) {
            System.out.println("Error saving: " + e.getMessage());
        }
    }

    private void cmdLoad(String filename) {
        if (filename.isEmpty()) { System.out.println("Usage: load <filename.csv>"); return; }
        try (BufferedReader br = new BufferedReader(new FileReader(filename))) {
            store.clear();
            String line;
            while ((line = br.readLine()) != null) {
                ToDoItem item = ToDoItem.fromCSV(line);
                if (item != null) store.put(item.getId(), item);
            }
            System.out.println("Loaded " + store.size() + " items from " + filename);
        } catch (IOException e) {
            System.out.println("Error loading: " + e.getMessage());
        }
    }

    private UUID resolveId(String shortId) {
        if (shortId == null || shortId.isEmpty()) return null;
        for (UUID uid : store.keySet()) {
            if (uid.toString().startsWith(shortId)) return uid;
        }
        return null;
    }

    public static void main(String[] args) {
        new ToDoApp().start();
    }
}
